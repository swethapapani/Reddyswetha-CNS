bfs

MAX_VERTICES = 10000
graph = [[0] * MAX_VERTICES for _ in range(MAX_VERTICES)]
visited = [0] * MAX_VERTICES
parent = [-1] * MAX_VERTICES
def bfs(start, end, vertices):
    queue = []
    level = 0
    for i in range(vertices):
        visited[i] = 0
        parent[i] = -1
    queue.append(start)
    visited[start] = 1
    while queue:
        size = len(queue)
        for _ in range(size):
            current = queue.pop(0)
            if current == end:
                return level
            for j in range(vertices):
                if graph[current][j] and not visited[j]:
                    queue.append(j)
                    visited[j] = 1
                    parent[j] = current
        level += 1
    return -1
def print_path(start, end):
    if start == end:
        print(f"{start}->", end='')
        return
    if parent[end] == -1:
        print("no path")
        return
    print_path(start, parent[end])
    print(f"{end}->", end='')
vertices = int(input("Enter the number of vertices: "))
edges = int(input("Enter the number of edges: "))
for i in range(vertices):
    for j in range(vertices):
        graph[i][j] = 0
print("Enter the source and destination for each edge:")
for _ in range(edges):
    scr, dest = map(int, input().split())
    graph[scr][dest] = 1
    graph[dest][scr] = 1
start = int(input("Enter the start node: "))
end = int(input("Enter the end node: "))
res = bfs(start, end, vertices)
print("Path:", end=' ')
print_path(start, end)
print(f"\nMinimum number of edges required: {res}")


8 queens
def safe(board, row, col, n):
    for i in range(row):
        if board[i][col] == 'Q':
            return False
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == 'Q':
            return False
        i -= 1
        j -= 1
    i, j = row, col
    while i >= 0 and j < n:
        if board[i][j] == 'Q':
            return False
        i -= 1
        j += 1
    return True
def solve(board, row, n, sol, stop):
    if row == n:
        sol.append([' '.join(r) for r in board])
        return True if stop else False
    for col in range(n):
        if safe(board, row, col, n):
            board[row][col] = 'Q'
            if solve(board, row + 1, n, sol, stop):
                return True
            board[row][col] = '_'
    return False
def queen(n):
    board = [['_'] * n for _ in range(n)]
    sol = []
    solve(board, 0, n, sol, stop=True)
    return sol
n = 8
sol = queen(n)
print(f"Total Solutions for {n}-Queens: {len(sol)}\n")
for idx, s in enumerate(sol, 1):
    print(f"Solution {idx}:")
    for row in s:
        print(row)
Â Â Â Â print()


cryptarthemetic
import itertools

# Define the words in the problem
def solve():
    letters = 'crosadnge'  # Unique letters
    digits = range(10)

    for perm in itertools.permutations(digits, len(letters)):
        c,r,o,s,a,d,n,g,e = perm

        # Leading letters can't be zero
        if c == 0 or r== 0:
            continue

        cross= 10000 * c + 1000 * r + 100 *o  + 10*s+s;
        roads= 10000 * r + 1000 * o + 100 *a  + 10*d+s;
        danger= 100000 * d + 10000 * a + 1000 * n + 100 * g +10*e+r;

        if cross+roads==danger:
            print(f"CROSS = {cross}, ROADS = {roads}, DANGER= {danger}")
            return

solve()

8 puzzle
from collections import deque

goal = (1,2,3,4,5,7,8,6,0)

def moves(state):
    i = state.index(0)
    swap = []
    if i not in [0,1,2]: swap.append(i-3) # Up
    if i not in [6,7,8]: swap.append(i+3) # Down
    if i not in [0,3,6]: swap.append(i-1) # Left
    if i not in [2,5,8]: swap.append(i+1) # Right
    return [tuple(state[j] if k==i else state[i] if k==j else state[k] for k in range(9)) for j in swap]

def solve(start):
    q = deque([(start, [start])])
    seen = {start}
    while q:
        s, path = q.popleft()
        if s == goal: return path
        for nxt in moves(s):
            if nxt not in seen:
                seen.add(nxt)
                q.append((nxt, path + [nxt]))

start = (1,2,3,4,5,6,0,7,8)
path = solve(start)

if path:
    print("Moves:", len(path)-1)
    for p in path:
        print(p[0:3], p[3:6], p[6:9], '', sep='\n')
else:
    print("Unsolvable")


